// Code generated by Prisma (prisma@1.30.0-beta.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  owcharacter: (where?: OwcharacterWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  owcharacter: (where: OwcharacterWhereUniqueInput) => OwcharacterPromise;
  owcharacters: (
    args?: {
      where?: OwcharacterWhereInput;
      orderBy?: OwcharacterOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Owcharacter>;
  owcharactersConnection: (
    args?: {
      where?: OwcharacterWhereInput;
      orderBy?: OwcharacterOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OwcharacterConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createOwcharacter: (data: OwcharacterCreateInput) => OwcharacterPromise;
  updateOwcharacter: (
    args: { data: OwcharacterUpdateInput; where: OwcharacterWhereUniqueInput }
  ) => OwcharacterPromise;
  updateManyOwcharacters: (
    args: {
      data: OwcharacterUpdateManyMutationInput;
      where?: OwcharacterWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertOwcharacter: (
    args: {
      where: OwcharacterWhereUniqueInput;
      create: OwcharacterCreateInput;
      update: OwcharacterUpdateInput;
    }
  ) => OwcharacterPromise;
  deleteOwcharacter: (where: OwcharacterWhereUniqueInput) => OwcharacterPromise;
  deleteManyOwcharacters: (
    where?: OwcharacterWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  owcharacter: (
    where?: OwcharacterSubscriptionWhereInput
  ) => OwcharacterSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type OwcharacterOrderByInput =
  | "_id_ASC"
  | "_id_DESC"
  | "class_ASC"
  | "class_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC"
  | "name_ASC"
  | "name_DESC"
  | "quote_ASC"
  | "quote_DESC"
  | "ultimate_ASC"
  | "ultimate_DESC"
  | "weapon_ASC"
  | "weapon_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface OwcharacterCreateInput {
  class?: String;
  imageUrl?: String;
  name?: String;
  quote?: String;
  ultimate?: String;
  weapon?: String;
}

export interface OwcharacterUpdateInput {
  class?: String;
  imageUrl?: String;
  name?: String;
  quote?: String;
  ultimate?: String;
  weapon?: String;
}

export interface OwcharacterUpdateManyMutationInput {
  class?: String;
  imageUrl?: String;
  name?: String;
  quote?: String;
  ultimate?: String;
  weapon?: String;
}

export interface OwcharacterWhereInput {
  _id?: ID_Input;
  _id_not?: ID_Input;
  _id_in?: ID_Input[] | ID_Input;
  _id_not_in?: ID_Input[] | ID_Input;
  _id_lt?: ID_Input;
  _id_lte?: ID_Input;
  _id_gt?: ID_Input;
  _id_gte?: ID_Input;
  _id_contains?: ID_Input;
  _id_not_contains?: ID_Input;
  _id_starts_with?: ID_Input;
  _id_not_starts_with?: ID_Input;
  _id_ends_with?: ID_Input;
  _id_not_ends_with?: ID_Input;
  class?: String;
  class_not?: String;
  class_in?: String[] | String;
  class_not_in?: String[] | String;
  class_lt?: String;
  class_lte?: String;
  class_gt?: String;
  class_gte?: String;
  class_contains?: String;
  class_not_contains?: String;
  class_starts_with?: String;
  class_not_starts_with?: String;
  class_ends_with?: String;
  class_not_ends_with?: String;
  imageUrl?: String;
  imageUrl_not?: String;
  imageUrl_in?: String[] | String;
  imageUrl_not_in?: String[] | String;
  imageUrl_lt?: String;
  imageUrl_lte?: String;
  imageUrl_gt?: String;
  imageUrl_gte?: String;
  imageUrl_contains?: String;
  imageUrl_not_contains?: String;
  imageUrl_starts_with?: String;
  imageUrl_not_starts_with?: String;
  imageUrl_ends_with?: String;
  imageUrl_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  quote?: String;
  quote_not?: String;
  quote_in?: String[] | String;
  quote_not_in?: String[] | String;
  quote_lt?: String;
  quote_lte?: String;
  quote_gt?: String;
  quote_gte?: String;
  quote_contains?: String;
  quote_not_contains?: String;
  quote_starts_with?: String;
  quote_not_starts_with?: String;
  quote_ends_with?: String;
  quote_not_ends_with?: String;
  ultimate?: String;
  ultimate_not?: String;
  ultimate_in?: String[] | String;
  ultimate_not_in?: String[] | String;
  ultimate_lt?: String;
  ultimate_lte?: String;
  ultimate_gt?: String;
  ultimate_gte?: String;
  ultimate_contains?: String;
  ultimate_not_contains?: String;
  ultimate_starts_with?: String;
  ultimate_not_starts_with?: String;
  ultimate_ends_with?: String;
  ultimate_not_ends_with?: String;
  weapon?: String;
  weapon_not?: String;
  weapon_in?: String[] | String;
  weapon_not_in?: String[] | String;
  weapon_lt?: String;
  weapon_lte?: String;
  weapon_gt?: String;
  weapon_gte?: String;
  weapon_contains?: String;
  weapon_not_contains?: String;
  weapon_starts_with?: String;
  weapon_not_starts_with?: String;
  weapon_ends_with?: String;
  weapon_not_ends_with?: String;
  AND?: OwcharacterWhereInput[] | OwcharacterWhereInput;
}

export interface OwcharacterSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OwcharacterWhereInput;
  AND?: OwcharacterSubscriptionWhereInput[] | OwcharacterSubscriptionWhereInput;
}

export type OwcharacterWhereUniqueInput = AtLeastOne<{
  _id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface AggregateOwcharacter {
  count: Int;
}

export interface AggregateOwcharacterPromise
  extends Promise<AggregateOwcharacter>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOwcharacterSubscription
  extends Promise<AsyncIterator<AggregateOwcharacter>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface OwcharacterPreviousValues {
  _id: ID_Output;
  class?: String;
  imageUrl?: String;
  name?: String;
  quote?: String;
  ultimate?: String;
  weapon?: String;
}

export interface OwcharacterPreviousValuesPromise
  extends Promise<OwcharacterPreviousValues>,
    Fragmentable {
  _id: () => Promise<ID_Output>;
  class: () => Promise<String>;
  imageUrl: () => Promise<String>;
  name: () => Promise<String>;
  quote: () => Promise<String>;
  ultimate: () => Promise<String>;
  weapon: () => Promise<String>;
}

export interface OwcharacterPreviousValuesSubscription
  extends Promise<AsyncIterator<OwcharacterPreviousValues>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  class: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  quote: () => Promise<AsyncIterator<String>>;
  ultimate: () => Promise<AsyncIterator<String>>;
  weapon: () => Promise<AsyncIterator<String>>;
}

export interface OwcharacterEdge {
  node: Owcharacter;
  cursor: String;
}

export interface OwcharacterEdgePromise
  extends Promise<OwcharacterEdge>,
    Fragmentable {
  node: <T = OwcharacterPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OwcharacterEdgeSubscription
  extends Promise<AsyncIterator<OwcharacterEdge>>,
    Fragmentable {
  node: <T = OwcharacterSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OwcharacterSubscriptionPayload {
  mutation: MutationType;
  node: Owcharacter;
  updatedFields: String[];
  previousValues: OwcharacterPreviousValues;
}

export interface OwcharacterSubscriptionPayloadPromise
  extends Promise<OwcharacterSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OwcharacterPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OwcharacterPreviousValuesPromise>() => T;
}

export interface OwcharacterSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OwcharacterSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OwcharacterSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OwcharacterPreviousValuesSubscription>() => T;
}

export interface Owcharacter {
  _id: ID_Output;
  class?: String;
  imageUrl?: String;
  name?: String;
  quote?: String;
  ultimate?: String;
  weapon?: String;
}

export interface OwcharacterPromise extends Promise<Owcharacter>, Fragmentable {
  _id: () => Promise<ID_Output>;
  class: () => Promise<String>;
  imageUrl: () => Promise<String>;
  name: () => Promise<String>;
  quote: () => Promise<String>;
  ultimate: () => Promise<String>;
  weapon: () => Promise<String>;
}

export interface OwcharacterSubscription
  extends Promise<AsyncIterator<Owcharacter>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  class: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  quote: () => Promise<AsyncIterator<String>>;
  ultimate: () => Promise<AsyncIterator<String>>;
  weapon: () => Promise<AsyncIterator<String>>;
}

export interface OwcharacterConnection {
  pageInfo: PageInfo;
  edges: OwcharacterEdge[];
}

export interface OwcharacterConnectionPromise
  extends Promise<OwcharacterConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OwcharacterEdge>>() => T;
  aggregate: <T = AggregateOwcharacterPromise>() => T;
}

export interface OwcharacterConnectionSubscription
  extends Promise<AsyncIterator<OwcharacterConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OwcharacterEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOwcharacterSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Owcharacter",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
