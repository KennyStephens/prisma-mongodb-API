// Code generated by Prisma (prisma@1.29.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  overwatchPrisma: (where?: OverwatchPrismaWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  overwatchPrisma: (
    where: OverwatchPrismaWhereUniqueInput
  ) => OverwatchPrismaPromise;
  overwatchPrismas: (
    args?: {
      where?: OverwatchPrismaWhereInput;
      orderBy?: OverwatchPrismaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<OverwatchPrisma>;
  overwatchPrismasConnection: (
    args?: {
      where?: OverwatchPrismaWhereInput;
      orderBy?: OverwatchPrismaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OverwatchPrismaConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createOverwatchPrisma: (
    data: OverwatchPrismaCreateInput
  ) => OverwatchPrismaPromise;
  updateOverwatchPrisma: (
    args: {
      data: OverwatchPrismaUpdateInput;
      where: OverwatchPrismaWhereUniqueInput;
    }
  ) => OverwatchPrismaPromise;
  updateManyOverwatchPrismas: (
    args: {
      data: OverwatchPrismaUpdateManyMutationInput;
      where?: OverwatchPrismaWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertOverwatchPrisma: (
    args: {
      where: OverwatchPrismaWhereUniqueInput;
      create: OverwatchPrismaCreateInput;
      update: OverwatchPrismaUpdateInput;
    }
  ) => OverwatchPrismaPromise;
  deleteOverwatchPrisma: (
    where: OverwatchPrismaWhereUniqueInput
  ) => OverwatchPrismaPromise;
  deleteManyOverwatchPrismas: (
    where?: OverwatchPrismaWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  overwatchPrisma: (
    where?: OverwatchPrismaSubscriptionWhereInput
  ) => OverwatchPrismaSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type OverwatchPrismaOrderByInput =
  | "_id_ASC"
  | "_id_DESC"
  | "__v_ASC"
  | "__v_DESC"
  | "class_ASC"
  | "class_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC"
  | "name_ASC"
  | "name_DESC"
  | "quote_ASC"
  | "quote_DESC"
  | "ultimate_ASC"
  | "ultimate_DESC"
  | "weapon_ASC"
  | "weapon_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface OverwatchPrismaCreateInput {
  __v?: Int;
  class?: String;
  imageUrl?: String;
  name?: String;
  quote?: String;
  ultimate?: String;
  weapon?: String;
}

export interface OverwatchPrismaUpdateInput {
  __v?: Int;
  class?: String;
  imageUrl?: String;
  name?: String;
  quote?: String;
  ultimate?: String;
  weapon?: String;
}

export interface OverwatchPrismaWhereInput {
  _id?: ID_Input;
  _id_not?: ID_Input;
  _id_in?: ID_Input[] | ID_Input;
  _id_not_in?: ID_Input[] | ID_Input;
  _id_lt?: ID_Input;
  _id_lte?: ID_Input;
  _id_gt?: ID_Input;
  _id_gte?: ID_Input;
  _id_contains?: ID_Input;
  _id_not_contains?: ID_Input;
  _id_starts_with?: ID_Input;
  _id_not_starts_with?: ID_Input;
  _id_ends_with?: ID_Input;
  _id_not_ends_with?: ID_Input;
  __v?: Int;
  __v_not?: Int;
  __v_in?: Int[] | Int;
  __v_not_in?: Int[] | Int;
  __v_lt?: Int;
  __v_lte?: Int;
  __v_gt?: Int;
  __v_gte?: Int;
  class?: String;
  class_not?: String;
  class_in?: String[] | String;
  class_not_in?: String[] | String;
  class_lt?: String;
  class_lte?: String;
  class_gt?: String;
  class_gte?: String;
  class_contains?: String;
  class_not_contains?: String;
  class_starts_with?: String;
  class_not_starts_with?: String;
  class_ends_with?: String;
  class_not_ends_with?: String;
  imageUrl?: String;
  imageUrl_not?: String;
  imageUrl_in?: String[] | String;
  imageUrl_not_in?: String[] | String;
  imageUrl_lt?: String;
  imageUrl_lte?: String;
  imageUrl_gt?: String;
  imageUrl_gte?: String;
  imageUrl_contains?: String;
  imageUrl_not_contains?: String;
  imageUrl_starts_with?: String;
  imageUrl_not_starts_with?: String;
  imageUrl_ends_with?: String;
  imageUrl_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  quote?: String;
  quote_not?: String;
  quote_in?: String[] | String;
  quote_not_in?: String[] | String;
  quote_lt?: String;
  quote_lte?: String;
  quote_gt?: String;
  quote_gte?: String;
  quote_contains?: String;
  quote_not_contains?: String;
  quote_starts_with?: String;
  quote_not_starts_with?: String;
  quote_ends_with?: String;
  quote_not_ends_with?: String;
  ultimate?: String;
  ultimate_not?: String;
  ultimate_in?: String[] | String;
  ultimate_not_in?: String[] | String;
  ultimate_lt?: String;
  ultimate_lte?: String;
  ultimate_gt?: String;
  ultimate_gte?: String;
  ultimate_contains?: String;
  ultimate_not_contains?: String;
  ultimate_starts_with?: String;
  ultimate_not_starts_with?: String;
  ultimate_ends_with?: String;
  ultimate_not_ends_with?: String;
  weapon?: String;
  weapon_not?: String;
  weapon_in?: String[] | String;
  weapon_not_in?: String[] | String;
  weapon_lt?: String;
  weapon_lte?: String;
  weapon_gt?: String;
  weapon_gte?: String;
  weapon_contains?: String;
  weapon_not_contains?: String;
  weapon_starts_with?: String;
  weapon_not_starts_with?: String;
  weapon_ends_with?: String;
  weapon_not_ends_with?: String;
  AND?: OverwatchPrismaWhereInput[] | OverwatchPrismaWhereInput;
}

export interface OverwatchPrismaUpdateManyMutationInput {
  __v?: Int;
  class?: String;
  imageUrl?: String;
  name?: String;
  quote?: String;
  ultimate?: String;
  weapon?: String;
}

export interface OverwatchPrismaSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OverwatchPrismaWhereInput;
  AND?:
    | OverwatchPrismaSubscriptionWhereInput[]
    | OverwatchPrismaSubscriptionWhereInput;
}

export type OverwatchPrismaWhereUniqueInput = AtLeastOne<{
  _id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface AggregateOverwatchPrisma {
  count: Int;
}

export interface AggregateOverwatchPrismaPromise
  extends Promise<AggregateOverwatchPrisma>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOverwatchPrismaSubscription
  extends Promise<AsyncIterator<AggregateOverwatchPrisma>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface OverwatchPrismaPreviousValues {
  _id: ID_Output;
  __v?: Int;
  class?: String;
  imageUrl?: String;
  name?: String;
  quote?: String;
  ultimate?: String;
  weapon?: String;
}

export interface OverwatchPrismaPreviousValuesPromise
  extends Promise<OverwatchPrismaPreviousValues>,
    Fragmentable {
  _id: () => Promise<ID_Output>;
  __v: () => Promise<Int>;
  class: () => Promise<String>;
  imageUrl: () => Promise<String>;
  name: () => Promise<String>;
  quote: () => Promise<String>;
  ultimate: () => Promise<String>;
  weapon: () => Promise<String>;
}

export interface OverwatchPrismaPreviousValuesSubscription
  extends Promise<AsyncIterator<OverwatchPrismaPreviousValues>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  __v: () => Promise<AsyncIterator<Int>>;
  class: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  quote: () => Promise<AsyncIterator<String>>;
  ultimate: () => Promise<AsyncIterator<String>>;
  weapon: () => Promise<AsyncIterator<String>>;
}

export interface OverwatchPrismaEdge {
  node: OverwatchPrisma;
  cursor: String;
}

export interface OverwatchPrismaEdgePromise
  extends Promise<OverwatchPrismaEdge>,
    Fragmentable {
  node: <T = OverwatchPrismaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OverwatchPrismaEdgeSubscription
  extends Promise<AsyncIterator<OverwatchPrismaEdge>>,
    Fragmentable {
  node: <T = OverwatchPrismaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OverwatchPrismaSubscriptionPayload {
  mutation: MutationType;
  node: OverwatchPrisma;
  updatedFields: String[];
  previousValues: OverwatchPrismaPreviousValues;
}

export interface OverwatchPrismaSubscriptionPayloadPromise
  extends Promise<OverwatchPrismaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OverwatchPrismaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OverwatchPrismaPreviousValuesPromise>() => T;
}

export interface OverwatchPrismaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OverwatchPrismaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OverwatchPrismaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OverwatchPrismaPreviousValuesSubscription>() => T;
}

export interface OverwatchPrisma {
  _id: ID_Output;
  __v?: Int;
  class?: String;
  imageUrl?: String;
  name?: String;
  quote?: String;
  ultimate?: String;
  weapon?: String;
}

export interface OverwatchPrismaPromise
  extends Promise<OverwatchPrisma>,
    Fragmentable {
  _id: () => Promise<ID_Output>;
  __v: () => Promise<Int>;
  class: () => Promise<String>;
  imageUrl: () => Promise<String>;
  name: () => Promise<String>;
  quote: () => Promise<String>;
  ultimate: () => Promise<String>;
  weapon: () => Promise<String>;
}

export interface OverwatchPrismaSubscription
  extends Promise<AsyncIterator<OverwatchPrisma>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  __v: () => Promise<AsyncIterator<Int>>;
  class: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  quote: () => Promise<AsyncIterator<String>>;
  ultimate: () => Promise<AsyncIterator<String>>;
  weapon: () => Promise<AsyncIterator<String>>;
}

export interface OverwatchPrismaConnection {
  pageInfo: PageInfo;
  edges: OverwatchPrismaEdge[];
}

export interface OverwatchPrismaConnectionPromise
  extends Promise<OverwatchPrismaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OverwatchPrismaEdge>>() => T;
  aggregate: <T = AggregateOverwatchPrismaPromise>() => T;
}

export interface OverwatchPrismaConnectionSubscription
  extends Promise<AsyncIterator<OverwatchPrismaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OverwatchPrismaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOverwatchPrismaSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "OverwatchPrisma",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
